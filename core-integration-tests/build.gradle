/*
 * Copyright (C) 2015 TIBCO Jaspersoft Corporation. All rights reserved.
 * http://community.jaspersoft.com/project/mobile-sdk-android
 *
 * Unless you have purchased a commercial license agreement from TIBCO Jaspersoft,
 * the following license terms apply:
 *
 * This program is part of TIBCO Jaspersoft Mobile SDK for Android.
 *
 * TIBCO Jaspersoft Mobile SDK is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * TIBCO Jaspersoft Mobile SDK is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with TIBCO Jaspersoft Mobile SDK for Android. If not, see
 * <http://www.gnu.org/licenses/lgpl>.
 */
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'net.saliman:gradle-properties-plugin:1.4.4'
    }
}

apply plugin: 'java'
apply plugin: 'net.saliman.properties'

dependencies {
    compile project(':js-android-sdk-core')

    testCompile 'org.hamcrest:hamcrest-integration:1.3'
    testCompile('pl.pragmatists:JUnitParams:1.0.4') {
        exclude group: 'org.hamcrest'
    }
    testCompile 'org.bouncycastle:bcprov-jdk16:1.46'
}

ext {
    buildSystemPath = "${rootDir}/buildsystem/"
    envPath = "${projectDir}/build/env"
    envFileName = 'integration_env.properties'
}

task prepIntegrationEnv() {
    def buildDir = file(envPath)
    requiredProperties "servers.file.name", "run.report.count"
    outputs.file new File(buildDir, envFileName)
    doFirst {
        copy {
            from file(buildSystemPath)
            include envFileName
            into buildDir
            filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: project.filterTokens)
        }
    }
}

task copyConfig << {
    Properties envProperties = new Properties()
    def resourceDir = file("${projectDir}/src/test/resources")
    def dynamicEnv = new File(envPath, envFileName)

    def copyServerConfigurationList = {
        def stream = new FileInputStream(dynamicEnv)
        envProperties.load(stream)

        def serverConfigPath = envProperties["servers.config.file"]
        copy {
            from file(serverConfigPath)
            into resourceDir
        }
    }
    def createTestEnvProperties = {
        def reportRunCount = envProperties["run.report.count"]
        def testEnv = file("${resourceDir}/test-env.properties")
        testEnv.createNewFile()

        Properties props = new Properties()
        props["run.report.count"] = reportRunCount
        def stream = new FileOutputStream(testEnv)
        props.store(stream, null)
    }

    copyServerConfigurationList()
    createTestEnvProperties()
}

copyConfig.dependsOn prepIntegrationEnv
compileJava.dependsOn copyConfig